# news_aggregator/app.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø

from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from config import Config
from models import db, User, NewsSource, Article
from forms import LoginForm, RegistrationForm, SourceSelectionForm
from news_fetcher import get_user_articles, fetch_news_from_sources
from cli_commands import register_commands
from datetime import datetime
import threading
import time


def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    db.init_app(app)

    login_manager = LoginManager()
    login_manager.init_app(app)
    login_manager.login_view = 'login'
    login_manager.login_message = '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
    login_manager.login_message_category = 'info'

    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CLI –∫–æ–º–∞–Ω–¥
    register_commands(app)

    return app


app = create_app()


def auto_update_news():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
    with app.app_context():
        while True:
            try:
                print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
                count = fetch_news_from_sources(days_back=1)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

            # –ñ–¥–µ–º 2 —á–∞—Å–∞ (7200 —Å–µ–∫—É–Ω–¥)
            time.sleep(7200)


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
    news_thread = threading.Thread(target=auto_update_news, daemon=True)
    news_thread.start()


@app.route('/')
def index():
    page = request.args.get('page', 1, type=int)
    q = request.args.get('q', "").strip()

    if current_user.is_authenticated:
        articles = get_user_articles(current_user, page, app.config['POSTS_PER_PAGE'])
        if q:
            articles = Article.query.filter(
                (Article.title.ilike(f"%{q}%")) |
                (Article.summary.ilike(f"%{q}%")) |
                (Article.description.ilike(f"%{q}%"))
            ).order_by(
                Article.url_to_image.isnot(None).desc(),  # –°–Ω–∞—á–∞–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
                Article.published_at.desc()                # –ü–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
            ).paginate(
                page=page, per_page=app.config['POSTS_PER_PAGE'], error_out=False
            )
    else:
        if q:
            articles = Article.query.filter(
                (Article.title.ilike(f"%{q}%")) |
                (Article.summary.ilike(f"%{q}%")) |
                (Article.description.ilike(f"%{q}%"))
            ).order_by(
                Article.url_to_image.isnot(None).desc(),  # –°–Ω–∞—á–∞–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
                Article.published_at.desc()
            ).paginate(
                page=page, per_page=app.config['POSTS_PER_PAGE'], error_out=False
            )
        else:
            articles = Article.query.order_by(
                Article.url_to_image.isnot(None).desc(),  # –°–Ω–∞—á–∞–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
                Article.published_at.desc()
            ).paginate(
                page=page, per_page=app.config['POSTS_PER_PAGE'], error_out=False
            )

    return render_template('index.html', articles=articles, q=q)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()

        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember_me.data)
            next_page = request.args.get('next')
            if not next_page or not next_page.startswith('/'):
                next_page = url_for('index')
            return redirect(next_page)

        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('auth/login.html', form=form)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()

        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success')
        return redirect(url_for('login'))

    return render_template('auth/register.html', form=form)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


@app.route('/settings', methods=['GET', 'POST'])
@login_required
def settings():
    form = SourceSelectionForm()

    if form.validate_on_submit():
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user.selected_sources = []

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        selected_source_ids = form.sources.data
        for source_id in selected_source_ids:
            source = NewsSource.query.get(source_id)
            if source:
                current_user.selected_sources.append(source)

        db.session.commit()
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success')
        return redirect(url_for('index'))

    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if request.method == 'GET':
        form.sources.data = [source.id for source in current_user.selected_sources]

    return render_template('settings.html', form=form)


@app.route('/article/<int:article_id>')
def article_detail(article_id):
    article = Article.query.get_or_404(article_id)
    return render_template('article_detail.html', article=article)


@app.route('/favorite/toggle/<int:article_id>', methods=['POST'])
@login_required
def toggle_favorite(article_id):
    article = Article.query.get_or_404(article_id)

    if current_user.is_favorite(article):
        current_user.remove_favorite(article)
        status = 'removed'
    else:
        current_user.add_favorite(article)
        status = 'added'

    return jsonify({'status': status})


@app.route('/favorites')
@login_required
def favorites():
    page = request.args.get('page', 1, type=int)
    per_page = app.config.get('POSTS_PER_PAGE', 10)

    favorites_query = Article.query.join(User.favorites).filter(
        User.id == current_user.id
    ).order_by(
        Article.url_to_image.isnot(None).desc(),  # –°–Ω–∞—á–∞–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        Article.published_at.desc()
    )
    articles = favorites_query.paginate(page=page, per_page=per_page, error_out=False)

    return render_template('favorites.html', articles=articles)


@app.route('/api/news-summary')
@login_required
def news_summary():
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–π –≤—ã–∂–∏–º–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        topic = request.args.get('topic', None)

        print(f"üîç –ó–∞–ø—Ä–æ—Å –≤—ã–∂–∏–º–∫–∏. –¢–µ–º–∞: {topic}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_user.selected_sources:
            source_ids = [source.id for source in current_user.selected_sources]
            articles_query = Article.query.filter(
                Article.source_id.in_(source_ids)
            ).order_by(Article.published_at.desc())
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {len(source_ids)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        else:
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –±–µ—Ä–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            articles_query = Article.query.order_by(
                Article.published_at.desc()
            )
            print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–π
        if topic:
            from summary_generator import filter_articles_by_topic
            all_articles = articles_query.limit(100).all()  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            print(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(all_articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            articles = filter_articles_by_topic(all_articles, topic)
            print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ '{topic}'")
        else:
            articles = articles_query.limit(15).all()
            print(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if not articles:
            print(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({
                'success': True,
                'data': {
                    'summary': f'–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
                    'top_articles': [],
                    'generated_at': datetime.now().strftime('%d.%m.%Y %H:%M'),
                    'total_sources': 0,
                    'topic': topic
                }
            })

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏
        from summary_generator import generate_news_summary, get_summary_statistics

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∂–∏–º–∫—É
        print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∂–∏–º–∫—É –∏–∑ {len(articles)} —Å—Ç–∞—Ç–µ–π...")
        summary_data = generate_news_summary(articles, max_articles=5, topic=topic)
        stats = get_summary_statistics(articles)

        print(f"‚úÖ –í—ã–∂–∏–º–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        return jsonify({
            'success': True,
            'data': {
                'summary': summary_data['summary'],
                'top_articles': summary_data['top_articles'],
                'generated_at': summary_data['generated_at'].strftime('%d.%m.%Y %H:%M'),
                'total_sources': len(set([a['source'] for a in summary_data['top_articles']])),
                'statistics': stats,
                'topic': topic
            }
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–∂–∏–º–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }), 500


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        start_background_tasks()
    # –î–ª—è Docker –Ω—É–∂–Ω–æ —Å–ª—É—à–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (0.0.0.0)
    app.run(host='0.0.0.0', port=5000, debug=True)