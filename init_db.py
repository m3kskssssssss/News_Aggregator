#!/usr/bin/env python
# init_db.py - —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î

import time
import sys
import os
from app import app, db
from models import User, NewsSource, Article
from rss_fetcher import fetch_rss_sources
from news_fetcher import fetch_all_sources, fetch_news_from_sources


def wait_for_db():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL"""
    print("üîÑ Waiting for PostgreSQL...")
    max_retries = 30
    for i in range(max_retries):
        try:
            with app.app_context():
                db.engine.connect()
            print("‚úÖ PostgreSQL is ready!")
            return True
        except Exception as e:
            if i < max_retries - 1:
                print(f"‚è≥ Waiting... ({i + 1}/{max_retries})")
                time.sleep(2)
            else:
                print(f"‚ùå Failed to connect to database: {e}")
                return False
    return False


def is_db_initialized():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î"""
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            return 'user' in tables and 'article' in tables
    except Exception as e:
        print(f"‚ö†Ô∏è Error checking DB: {e}")
        return False


def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üöÄ Starting database initialization...")

    if not wait_for_db():
        print("‚ùå Database not available")
        sys.exit(1)

    with app.app_context():
        if is_db_initialized():
            print("‚úÖ Database already initialized - skipping full init")
            print("üîÑ Updating news...")

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            try:
                rss_count = fetch_rss_sources()
                print(f"üì° RSS: added {rss_count} articles")
            except Exception as e:
                print(f"‚ö†Ô∏è RSS update failed: {e}")

            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ API, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
                api_count = fetch_news_from_sources(days_back=1)
                print(f"üì∞ NewsAPI: added {api_count} articles")
            except Exception as e:
                print(f"‚ö†Ô∏è NewsAPI update failed (not critical): {e}")
        else:
            print("üÜï First run detected - full initialization...")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print("üìä Creating database tables...")
            db.create_all()
            print("‚úÖ Tables created")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –Ω–æ–≤–æ—Å—Ç–∏
            print("üì° Fetching RSS news...")
            try:
                rss_count = fetch_rss_sources()
                print(f"‚úÖ RSS: loaded {rss_count} articles")
            except Exception as e:
                print(f"‚ö†Ô∏è RSS failed: {e}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ NewsAPI
            print("üåê Fetching sources from NewsAPI...")
            try:
                sources_count = fetch_all_sources()
                print(f"‚úÖ NewsAPI sources: loaded {sources_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è NewsAPI sources failed: {e}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ NewsAPI
            print("üì∞ Fetching news from NewsAPI...")
            try:
                news_count = fetch_news_from_sources(days_back=2)
                print(f"‚úÖ NewsAPI news: loaded {news_count} articles")
            except Exception as e:
                print(f"‚ö†Ô∏è NewsAPI news failed: {e}")

            print("üéâ Initialization complete!")


if __name__ == "__main__":
    initialize_database()