// static/js/game.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

class NewsFlappyGame {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');

        // –†–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
        this.canvas.width = Math.min(800, window.innerWidth - 40);
        this.canvas.height = 600;

        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.bird = {
            x: 100,
            y: this.canvas.height / 2,
            width: 40,
            height: 40,
            velocity: 0,
            gravity: 0.35,
            jumpForce: -8
        };

        this.pipes = [];
        this.pipeGap = 220;
        this.pipeWidth = 60;
        this.pipeSpeed = 3;
        this.frameCount = 0;

        this.articles = [];
        this.articleHeight = 100;
        this.articleSpeed = 3;

        this.score = 0;
        this.bestScore = parseInt(localStorage.getItem('newsGameBestScore') || '0');
        this.articlesRead = parseInt(localStorage.getItem('newsGameArticlesRead') || '0');
        this.hitCount = 0;

        this.gameState = 'start';
        this.landedArticle = null;
        this.firstJump = false;

        // –≠—Ñ—Ñ–µ–∫—Ç—ã —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        this.hitCooldown = 0;
        this.isHit = false;

        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.startScreen = document.getElementById('startScreen');
        this.pauseScreen = document.getElementById('pauseScreen');
        this.gameOverScreen = document.getElementById('gameOverScreen');

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        this.lastPipeTime = 0;
        this.pipeInterval = 150; // –∫–∞–¥—Ä—ã –º–µ–∂–¥—É —Ç—Ä—É–±–∞–º–∏

        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        this.loadRandomArticles();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è canvas
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleInput();
        }, { passive: false });

        this.canvas.addEventListener('mousedown', (e) => {
            e.preventDefault();
            this.handleInput();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤
        this.startScreen.addEventListener('touchstart', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.handleInput();
        }, { passive: false });

        this.startScreen.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleInput();
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                this.handleInput();
            }
        });

        // –ö–Ω–æ–ø–∫–∏
        const playAgainBtn = document.getElementById('playAgainBtn');
        const restartBtn = document.getElementById('restartBtn');
        const readArticleBtnPause = document.getElementById('readArticleBtnPause');
        const readArticleBtnGameOver = document.getElementById('readArticleBtnGameOver');

        if (playAgainBtn) {
            playAgainBtn.addEventListener('click', () => this.restart());
        }

        if (restartBtn) {
            restartBtn.addEventListener('click', () => this.restart());
        }

        if (readArticleBtnPause) {
            readArticleBtnPause.addEventListener('click', () => this.readArticle());
        }

        if (readArticleBtnGameOver) {
            readArticleBtnGameOver.addEventListener('click', () => this.readArticle());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUI();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        this.lastTime = performance.now();
        this.gameLoop();

        console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    }

    async loadRandomArticles() {
        try {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è –∏–≥—Ä—ã...');
            const response = await fetch('/api/game/random-articles?count=6');
            const data = await response.json();

            if (!data.articles || data.articles.length === 0) {
                throw new Error('–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ');
            }

            const articleWidth = 230;
            const spacing = 20;

            this.articles = data.articles.map((article, index) => ({
                ...article,
                x: index * (articleWidth + spacing),
                y: this.canvas.height - this.articleHeight,
                width: articleWidth
            }));

            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç–µ–π:', this.articles.length);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π:', error);

            const articleWidth = 230;
            const spacing = 20;

            this.articles = [
                {id: 1, title: '–í –¢–±–∏–ª–∏—Å–∏ –≤ –¥–µ–Ω—å –≤—ã–±–æ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ –º–∞—Å—Å–æ–≤—ã–µ –º–∏—Ç–∏–Ω–≥–∏', url: '#', source: 'Test News'},
                {id: 2, title: '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞', url: '#', source: 'Tech Daily'},
                {id: 3, title: '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å: —Ä–æ—Å—Ç –∞–∫—Ü–∏–π', url: '#', source: 'Business'},
                {id: 4, title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: —Ñ–∏–Ω–∞–ª —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞', url: '#', source: 'Sports'},
                {id: 5, title: '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ: –Ω–æ–≤–∞—è –≤—ã—Å—Ç–∞–≤–∫–∞', url: '#', source: 'Culture'},
                {id: 6, title: '–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ', url: '#', source: 'Science'}
            ].map((article, index) => ({
                ...article,
                x: index * (articleWidth + spacing),
                y: this.canvas.height - this.articleHeight,
                width: articleWidth
            }));

            console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏');
        }
    }

    handleInput() {
        if (this.gameState === 'start') {
            this.startGame();
        } else if (this.gameState === 'playing') {
            this.jump();
        }
    }

    startGame() {
        console.log('üöÄ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
        this.gameState = 'playing';
        this.startScreen.style.display = 'none';
        this.bird.x = 100;
        this.firstJump = false;
        this.bird.velocity = 0;
    }

    jump() {
        this.firstJump = true;
        this.bird.velocity = this.bird.jumpForce;
    }

    restart() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        this.bird.y = this.canvas.height / 2;
        this.bird.x = 100;
        this.bird.velocity = 0;
        this.pipes = [];
        this.score = 0;
        this.hitCount = 0;
        this.frameCount = 0;
        this.hitCooldown = 0;
        this.isHit = false;
        this.firstJump = false;
        this.gameState = 'playing';
        this.pauseScreen.style.display = 'none';
        this.gameOverScreen.style.display = 'none';
        this.landedArticle = null;
        this.loadRandomArticles();
        this.updateUI();
    }

    readArticle() {
        if (this.landedArticle) {
            window.open(this.landedArticle.url, '_blank');
            this.articlesRead++;
            localStorage.setItem('newsGameArticlesRead', this.articlesRead.toString());
            this.updateUI();
        }
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ–¥ –ø—Ç–∏—Ü–µ–π
    getArticleUnderBird() {
        const birdCenterX = this.bird.x + this.bird.width / 2;
        const birdBottomY = this.bird.y + this.bird.height;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ç–∏—Ü–∞ –≤ –∑–æ–Ω–µ —Å—Ç–∞—Ç–µ–π
        if (birdBottomY < this.canvas.height - this.articleHeight) {
            return null;
        }

        for (let article of this.articles) {
            if (birdCenterX >= article.x && birdCenterX <= article.x + article.width) {
                return article;
            }
        }

        return null;
    }

    update() {
        if (this.gameState !== 'playing') return;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã
        if (this.firstJump) {
            this.bird.velocity += this.bird.gravity;
            this.bird.y += this.bird.velocity;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä—É–± —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        this.frameCount++;
        if (this.frameCount - this.lastPipeTime > this.pipeInterval && this.firstJump) {
            const minHeight = 50;
            const maxHeight = this.canvas.height - this.pipeGap - this.articleHeight - 50;
            const height = Math.random() * (maxHeight - minHeight) + minHeight;

            this.pipes.push({
                x: this.canvas.width,
                topHeight: height,
                bottomY: height + this.pipeGap,
                scored: false
            });

            this.lastPipeTime = this.frameCount;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä—É–±
        for (let i = this.pipes.length - 1; i >= 0; i--) {
            this.pipes[i].x -= this.pipeSpeed;

            if (!this.pipes[i].scored && this.pipes[i].x + this.pipeWidth < this.bird.x) {
                this.pipes[i].scored = true;
                this.score++;
                this.updateUI();
            }

            if (this.pipes[i].x + this.pipeWidth < 0) {
                this.pipes.splice(i, 1);
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
        const articleWidth = 230;
        const spacing = 20;
        const totalWidth = articleWidth + spacing;

        this.articles.forEach(article => {
            article.x -= this.articleSpeed;

            if (article.x + articleWidth < 0) {
                const maxX = Math.max(...this.articles.map(a => a.x));
                article.x = maxX + totalWidth;
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        this.checkCollisions();
    }

    checkCollisions() {
        if (this.hitCooldown > 0) {
            this.hitCooldown--;
            if (this.hitCooldown === 0) {
                this.isHit = false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ª–µ—Ç–∞ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
        if (this.bird.y < -10) {
            console.log('üíÄ –£–ª–µ—Ç–µ–ª–∞ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É!');
            this.landedArticle = this.getArticleUnderBird();
            console.log('üì∞ –°—Ç–∞—Ç—å—è –ø–æ–¥ –ø—Ç–∏—Ü–µ–π:', this.landedArticle ? this.landedArticle.title : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            this.gameOver();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Ç—Ä—É–±–∞–º–∏
        for (let pipe of this.pipes) {
            if (this.bird.x + this.bird.width > pipe.x &&
                this.bird.x < pipe.x + this.pipeWidth) {

                if (this.bird.y < pipe.topHeight ||
                    this.bird.y + this.bird.height > pipe.bottomY) {

                    console.log('üíÄ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –±–ª–æ–∫–æ–º!');
                    this.landedArticle = this.getArticleUnderBird();
                    console.log('üì∞ –°—Ç–∞—Ç—å—è –ø–æ–¥ –ø—Ç–∏—Ü–µ–π:', this.landedArticle ? this.landedArticle.title : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    this.gameOver();
                    return;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—å—é
        if (this.bird.y + this.bird.height >= this.canvas.height - this.articleHeight) {
            this.landOnArticle();
        }
    }

    landOnArticle() {
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å—é –ø–æ–¥ –ø—Ç–∏—Ü–µ–π
        this.landedArticle = this.getArticleUnderBird();

        if (this.landedArticle) {
            console.log('‚úÖ –ü—Ä–∏–∑–µ–º–ª–∏–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ç—å—é:', this.landedArticle.title);
        } else {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç—å—è –ø–æ–¥ –ø—Ç–∏—Ü–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            this.landedArticle = this.articles[0] || null;
        }

        this.pause();
    }

    pause() {
        console.log('‚è∏Ô∏è –ü–∞—É–∑–∞. –°—Ç–∞—Ç—å—è:', this.landedArticle ? this.landedArticle.title : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        this.gameState = 'paused';

        const articleInfo = document.getElementById('landedArticlePause');

        if (articleInfo && this.landedArticle) {
            let statsText = '';
            if (this.hitCount > 0) {
                statsText = `<p style="color: #ff6b6b; font-size: 0.9rem; margin-bottom: 1rem;">üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π: ${this.hitCount}</p>`;
            } else {
                statsText = `<p style="color: #51cf66; font-size: 0.9rem; margin-bottom: 1rem;">‚ú® –ë–µ–∑ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π!</p>`;
            }

            articleInfo.innerHTML = `
                ${statsText}
                <div class="article-card">
                    <h3>${this.landedArticle.title}</h3>
                    <p class="article-source">
                        <i class="fas fa-newspaper"></i> ${this.landedArticle.source}
                    </p>
                </div>
            `;
        }

        this.pauseScreen.style.display = 'flex';

        if (this.score > this.bestScore) {
            this.bestScore = this.score;
            localStorage.setItem('newsGameBestScore', this.bestScore.toString());
            this.updateUI();
        }
    }

    gameOver() {
        console.log('üíÄ Game Over! –°—Ç–∞—Ç—å—è:', this.landedArticle ? this.landedArticle.title : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        this.gameState = 'gameover';
        document.getElementById('finalScore').textContent = this.score;

        const deathMessage = document.querySelector('.death-message');
        const articleInfo = document.getElementById('landedArticleGameOver');

        if (articleInfo) {
            if (this.landedArticle) {
                let statsText = '';
                if (this.hitCount > 0) {
                    statsText = `<p style="color: #ff6b6b; font-size: 0.9rem; margin-bottom: 1rem;">üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π: ${this.hitCount}</p>`;
                } else {
                    statsText = `<p style="color: #51cf66; font-size: 0.9rem; margin-bottom: 1rem;">‚ú® –ë–µ–∑ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π!</p>`;
                }

                articleInfo.innerHTML = `
                    ${statsText}
                    <div class="article-card">
                        <h3>${this.landedArticle.title}</h3>
                        <p class="article-source">
                            <i class="fas fa-newspaper"></i> ${this.landedArticle.source}
                        </p>
                    </div>
                `;
            } else {
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏
                this.landedArticle = this.getArticleUnderBird() || this.articles[0] || null;

                if (this.landedArticle) {
                    articleInfo.innerHTML = `
                        <div class="article-card">
                            <h3>${this.landedArticle.title}</h3>
                            <p class="article-source">
                                <i class="fas fa-newspaper"></i> ${this.landedArticle.source}
                            </p>
                        </div>
                    `;
                } else {
                    articleInfo.innerHTML = `
                        <div class="article-card">
                            <p style="color: #999;">–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
                        </div>
                    `;
                }
            }
        }

        if (this.hitCount > 0) {
            deathMessage.textContent = `Game Over! (${this.hitCount} —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π)`;
        } else {
            deathMessage.textContent = 'Game Over!';
        }

        this.gameOverScreen.style.display = 'flex';

        if (this.score > this.bestScore) {
            this.bestScore = this.score;
            localStorage.setItem('newsGameBestScore', this.bestScore.toString());
            this.updateUI();
        }
    }

    draw() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
        this.ctx.fillStyle = '#ffffff';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        this.drawGrid();

        // –†–∏—Å—É–µ–º —Ç—Ä—É–±—ã
        this.drawPipes();

        // –†–∏—Å—É–µ–º —Å—Ç–∞—Ç—å–∏
        this.drawArticles();

        // –†–∏—Å—É–µ–º –ø—Ç–∏—Ü—É
        this.drawBird();

        // –†–∏—Å—É–µ–º —Å—á–µ—Ç
        if (this.gameState === 'playing') {
            this.drawScore();
        }
    }

    drawGrid() {
        this.ctx.strokeStyle = '#f0f0f0';
        this.ctx.lineWidth = 1;

        // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const gridSize = 40;
        const startX = Math.floor(0 / gridSize) * gridSize;
        const startY = Math.floor(0 / gridSize) * gridSize;

        for (let x = startX; x < this.canvas.width; x += gridSize) {
            this.ctx.beginPath();
            this.ctx.moveTo(x, 0);
            this.ctx.lineTo(x, this.canvas.height);
            this.ctx.stroke();
        }

        for (let y = startY; y < this.canvas.height; y += gridSize) {
            this.ctx.beginPath();
            this.ctx.moveTo(0, y);
            this.ctx.lineTo(this.canvas.width, y);
            this.ctx.stroke();
        }
    }

    drawBird() {
        const birdColor = this.isHit ? '#ff0000' : '#000000';

        this.ctx.fillStyle = birdColor;
        this.ctx.fillRect(this.bird.x, this.bird.y, this.bird.width, this.bird.height);

        this.ctx.fillStyle = '#ffffff';
        this.ctx.fillRect(this.bird.x + 25, this.bird.y + 10, 8, 8);

        this.ctx.fillStyle = birdColor;
        this.ctx.fillRect(this.bird.x + 40, this.bird.y + 15, 8, 8);

        if (Math.floor(this.frameCount / 10) % 2 === 0) {
            this.ctx.fillRect(this.bird.x - 8, this.bird.y + 20, 15, 8);
        }
    }

    drawPipes() {
        this.ctx.fillStyle = '#000000';

        for (let pipe of this.pipes) {
            // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Ç—Ä—É–±—ã
            if (pipe.x + this.pipeWidth < 0 || pipe.x > this.canvas.width) {
                continue;
            }

            this.ctx.fillRect(pipe.x, 0, this.pipeWidth, pipe.topHeight);

            const bottomHeight = this.canvas.height - this.articleHeight - pipe.bottomY;
            this.ctx.fillRect(pipe.x, pipe.bottomY, this.pipeWidth, bottomHeight);

            this.ctx.strokeStyle = '#ffffff';
            this.ctx.lineWidth = 2;
            this.ctx.strokeRect(pipe.x, 0, this.pipeWidth, pipe.topHeight);
            this.ctx.strokeRect(pipe.x, pipe.bottomY, this.pipeWidth, bottomHeight);
        }
    }

    drawArticles() {
        const bottomY = this.canvas.height - this.articleHeight;

        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(0, bottomY, this.canvas.width, this.articleHeight);

        this.ctx.strokeStyle = '#ffffff';
        this.ctx.lineWidth = 3;
        this.ctx.beginPath();
        this.ctx.moveTo(0, bottomY);
        this.ctx.lineTo(this.canvas.width, bottomY);
        this.ctx.stroke();

        if (!this.articles || this.articles.length === 0) {
            this.ctx.fillStyle = '#ffffff';
            this.ctx.font = 'bold 16px monospace';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('–ó–ê–ì–†–£–ó–ö–ê –ù–û–í–û–°–¢–ï–ô...', this.canvas.width / 2, bottomY + this.articleHeight / 2);
            this.ctx.textAlign = 'left';
            return;
        }

        const spacing = 10;

        for (let article of this.articles) {
            const x = article.x;
            const y = bottomY;

            // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å—Ç–∞—Ç—å–∏
            if (x + article.width < 0 || x > this.canvas.width) {
                continue;
            }

            this.ctx.fillStyle = '#2a2a2a';
            this.ctx.fillRect(x + spacing, y + spacing, article.width - spacing * 2, this.articleHeight - spacing * 2);

            this.ctx.strokeStyle = '#ffffff';
            this.ctx.lineWidth = 2;
            this.ctx.strokeRect(x + spacing, y + spacing, article.width - spacing * 2, this.articleHeight - spacing * 2);

            this.ctx.fillStyle = '#ffffff';
            this.ctx.font = 'bold 12px Arial, sans-serif';
            this.ctx.textAlign = 'left';

            const textX = x + spacing + 8;
            const textStartY = y + spacing + 20;
            const maxTextWidth = article.width - spacing * 2 - 16;

            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            let title = article.title;
            const metrics = this.ctx.measureText(title);
            if (metrics.width > maxTextWidth) {
                title = title.substring(0, 30) + '...';
            }

            this.ctx.fillText(title, textX, textStartY);

            this.ctx.fillStyle = '#888888';
            this.ctx.font = '10px monospace';
            const sourceY = y + this.articleHeight - spacing - 8;
            this.ctx.fillText('üì∞ ' + article.source, textX, sourceY);
        }

        this.ctx.textAlign = 'left';
    }

    drawScore() {
        this.ctx.fillStyle = '#000000';
        this.ctx.font = 'bold 36px monospace';
        this.ctx.textAlign = 'center';

        this.ctx.strokeStyle = '#ffffff';
        this.ctx.lineWidth = 4;
        this.ctx.strokeText(this.score.toString(), this.canvas.width / 2, 50);
        this.ctx.fillText(this.score.toString(), this.canvas.width / 2, 50);

        if (this.hitCount > 0) {
            this.ctx.font = 'bold 18px monospace';
            this.ctx.textAlign = 'right';
            this.ctx.fillStyle = '#ff0000';
            const hitText = 'üí• ' + this.hitCount;

            this.ctx.strokeStyle = '#ffffff';
            this.ctx.lineWidth = 3;
            this.ctx.strokeText(hitText, this.canvas.width - 20, 30);
            this.ctx.fillText(hitText, this.canvas.width - 20, 30);
        }

        this.ctx.textAlign = 'left';
    }

    updateUI() {
        document.getElementById('currentScore').textContent = this.score;
        document.getElementById('bestScore').textContent = this.bestScore;
        document.getElementById('articlesRead').textContent = this.articlesRead;
    }

    gameLoop() {
        const currentTime = performance.now();
        const deltaTime = currentTime - this.lastTime;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (deltaTime > 16) { // ~60 FPS
            this.update();
            this.draw();
            this.lastTime = currentTime;
        }

        requestAnimationFrame(() => this.gameLoop());
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const game = new NewsFlappyGame();
});